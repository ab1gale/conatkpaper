\begin{thebibliography}{10}

\bibitem{apache-bug-25520}
Apache bug 25520.
\newblock \url{https://bz.apache.org/bugzilla/show_bug.cgi?id=25520}.

\bibitem{apache-bug-46215}
Apache bug 46215.
\newblock \url{https://bz.apache.org/bugzilla/show_bug.cgi?id=46215}.

\bibitem{theotheriphone}
{CVE-2008-0034}.
\newblock \url{http://www.cvedetails.com/cve/CVE-2008-0034/}.

\bibitem{xwindows}
{CVE-2010-0923}.
\newblock \url{http://www.cvedetails.com/cve/CVE-2010-0923}.

\bibitem{theotheriphone-2011}
{CVE-2010-1754}.
\newblock \url{http://www.cvedetails.com/cve/CVE-2010-1754/}.

\bibitem{cve:2017-7533}
{CVE-2017-7533}.
\newblock \url{https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7533}.

\bibitem{freebsdcve}
{Freebsd CVE-2009-3527}.
\newblock \url{http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3527}.

\bibitem{uselib-bug-12791}
Linux kernel bug on uselib().
\newblock \url{http://osvdb.org/show/osvdb/12791}.

\bibitem{berend-jan-wever-msiexploit}
{MSIE} javaprxy.dll {COM} object exploit.
\newblock \url{http://www.exploit-db.com/exploits/1079/}.

\bibitem{mysql-bug-14747}
Mysql bug 14747.
\newblock \url{https://bugs.mysql.com/bug.php?id=14747}.

\bibitem{mysql}
{MySQL Database}.
\newblock \url{http://www.mysql.com/}, 2014.

\bibitem{apache}
Apache web server.
\newblock \url{http://www.apache.org}, 2012.

\bibitem{arzt2014flowdroid}
S.~Arzt, S.~Rasthofer, C.~Fritz, E.~Bodden, A.~Bartel, J.~Klein, Y.~Le~Traon,
  D.~Octeau, and P.~McDaniel.
\newblock Flowdroid: Precise context, flow, field, object-sensitive and
  lifecycle-aware taint analysis for android apps.
\newblock {\em Acm Sigplan Notices}, 49(6):259--269, 2014.

\bibitem{attariyan2012x}
M.~Attariyan, M.~Chow, and J.~Flinn.
\newblock X-ray: Automating root-cause diagnosis of performance anomalies in
  production software.
\newblock In {\em OSDI}, volume~12, pages 307--320, 2012.

\bibitem{coverity:cacm}
A.~Bessey, K.~Block, B.~Chelf, A.~Chou, B.~Fulton, S.~Hallem, C.~Henri-Gros,
  A.~Kamsky, S.~McPeak, and D.~Engler.
\newblock A few billion lines of code later: using static analysis to find bugs
  in the real world.
\newblock {\em Commun. ACM}, 53:66--75, Feb. 2010.

\bibitem{bishop1996checking}
M.~Bishop, M.~Dilger, et~al.
\newblock Checking for race conditions in file accesses.
\newblock {\em Computing systems}, 2(2):131--152, 1996.

\bibitem{klee:osdi08}
C.~Cadar, D.~Dunbar, and D.~Engler.
\newblock {KLEE}: unassisted and automatic generation of high-coverage tests
  for complex systems programs.
\newblock In {\em Proceedings of the Eighth Symposium on Operating Systems
  Design and Implementation (OSDI '08)}, pages 209--224, Dec. 2008.

\bibitem{cadar:exe:ccs06}
C.~Cadar, V.~Ganesh, P.~M. Pawlowski, D.~L. Dill, and D.~R. Engler.
\newblock {EXE}: automatically generating inputs of death.
\newblock In {\em Proceedings of the 13th ACM conference on Computer and
  communications security (CCS '06)}, pages 322--335, Oct.--Nov. 2006.

\bibitem{taas:socc10}
G.~Candea, S.~Bucur, and C.~Zamfir.
\newblock Automated software testing as a service.
\newblock In {\em Proceedings of the 1st Symposium on Cloud Computing (SOCC
  '10)}, 2010.

\bibitem{castro:bug-report-privacy}
M.~Castro, M.~Costa, and J.-P. Martin.
\newblock Better bug reporting with better privacy.
\newblock In {\em Thirteenth International Conference on Architecture Support
  for Programming Languages and Operating Systems (ASPLOS '08)}, pages
  319--328, Mar. 2008.

\bibitem{s2e:hotdep09}
V.~Chipounov, V.~Georgescu, C.~Zamfir, and G.~Candea.
\newblock {Selective Symbolic Execution}.
\newblock In {\em Fifth Workshop on Hot Topics in System Dependability (HotDep
  '09)}, 2009.

\bibitem{woodpecker:asplos13}
H.~Cui, G.~Hu, J.~Wu, and J.~Yang.
\newblock Verifying systems rules using rule-directed symbolic execution.
\newblock In {\em Eighteenth International Conference on Architecture Support
  for Programming Languages and Operating Systems (ASPLOS '13)}, 2013.

\bibitem{taskrecycling:ppopp90}
A.~Dinning and E.~Schonberg.
\newblock An empirical comparison of monitoring algorithms for access anomaly
  detection.
\newblock In {\em Proceedings of the 2nd Symposium on Principles and Practice
  of Parallel Programming (PPOPP '90)}, pages 1--10, Mar. 1990.

\bibitem{taintdroid:osdi10}
W.~Enck, P.~Gilbert, B.-G. Chun, L.~P. Cox, J.~Jung, P.~McDaniel, and A.~N.
  Sheth.
\newblock {TaintDroid}: an information-flow tracking system for realtime
  privacy monitoring on smartphones.
\newblock In {\em Proceedings of the Ninth Symposium on Operating Systems
  Design and Implementation (OSDI '10)}, pages 1--6, 2010.

\bibitem{racerx:sosp03}
D.~Engler and K.~Ashcraft.
\newblock {RacerX}: effective, static detection of race conditions and
  deadlocks.
\newblock In {\em Proceedings of the 19th ACM Symposium on Operating Systems
  Principles (SOSP '03)}, pages 237--252, Oct. 2003.

\bibitem{engler:vmcai}
D.~Engler and M.~Musuvathi.
\newblock Static analysis versus software model checking for bug finding.
\newblock In {\em Invited paper: Fifth International Conference on
  Verification, Model Checking, and Abstract Interpretation (VMCAI04)}, pages
  191--210, Jan. 2004.

\bibitem{felmetsger2010toward}
V.~Felmetsger, L.~Cavedon, C.~Kruegel, and G.~Vigna.
\newblock Toward automated detection of logic vulnerabilities in web
  applications.
\newblock In {\em USENIX Security Symposium}, volume~58, 2010.

\bibitem{godefroid:grammar-fuzzing}
P.~Godefroid, A.~Kiezun, and M.~Y. Levin.
\newblock Grammar-based whitebox fuzzing.
\newblock In {\em PLDI '08: Proceedings of the 2008 ACM SIGPLAN conference on
  Programming language design and implementation}, pages 206--215, 2008.

\bibitem{dart:pldi}
P.~Godefroid, N.~Klarlund, and K.~Sen.
\newblock {DART}: Directed automated random testing.
\newblock In {\em Proceedings of the ACM SIGPLAN 2005 Conference on Programming
  Language Design and Implementation (PLDI '05)}, pages 213--223, June 2005.

\bibitem{godefroid:whitebox-fuzzing}
P.~Godefroid, M.~Levin, and D.~Molnar.
\newblock Automated whitebox fuzz testing.
\newblock In {\em NDSS '08: Proceedings of 15th Network and Distributed System
  Security Symposium}, Feb. 2008.

\bibitem{seth:pldi}
S.~Hallem, B.~Chelf, Y.~Xie, and D.~Engler.
\newblock A system and language for building system-specific, static analyses.
\newblock In {\em Proceedings of the ACM SIGPLAN 2002 Conference on Programming
  Language Design and Implementation (PLDI '02)}, June 2002.

\bibitem{automated:osdi}
G.~Jin, W.~Zhang, D.~Deng, B.~Liblit, and S.~Lu.
\newblock Automated concurrency-bug fixing.
\newblock In {\em OSDI}, volume~12, pages 221--236, 2012.

\bibitem{deadlock-immunity:osdi08}
H.~Jula, D.~Tralamazza, C.~Zamfir, and G.~Candea.
\newblock Deadlock immunity: Enabling systems to defend against deadlocks.
\newblock In {\em Proceedings of the Eighth Symposium on Operating Systems
  Design and Implementation (OSDI '08)}, 2008.

\bibitem{failure:sketch:sosp15}
B.~Kasikci, B.~Schubert, C.~Pereira, G.~Pokam, and G.~Candea.
\newblock Failure sketching: A technique for automated root cause diagnosis of
  in-production failures.
\newblock In {\em Proceedings of the 25th ACM Symposium on Operating Systems
  Principles (SOSP '15)}, Oct. 2015.

\bibitem{kasikci2013racemob}
B.~Kasikci, C.~Zamfir, and G.~Candea.
\newblock Racemob: crowdsourced data race detection.
\newblock In {\em Proceedings of the twenty-fourth ACM symposium on operating
  systems principles}, pages 406--422. ACM, 2013.

\bibitem{libsafe}
{Libsafe}.
\newblock \url{http://directory.fsf.org/wiki/Libsafe}.

\bibitem{livshits05finding}
V.~B. Livshits and M.~S. Lam.
\newblock Finding security errors in {J}ava programs with static analysis.
\newblock In {\em Proceedings of the 14th Usenix Security Symposium}, pages
  271--286, Aug. 2005.

\bibitem{lu:muvi:sosp}
S.~Lu, S.~Park, C.~Hu, X.~Ma, W.~Jiang, Z.~Li, R.~A. Popa, and Y.~Zhou.
\newblock Muvi: automatically inferring multi-variable access correlations and
  detecting related semantic and concurrency bugs.
\newblock In {\em Proceedings of the 21st ACM Symposium on Operating Systems
  Principles (SOSP '07)}, pages 103--116, 2007.

\bibitem{lu:concurrency-bugs}
S.~Lu, S.~Park, E.~Seo, and Y.~Zhou.
\newblock Learning from mistakes: a comprehensive study on real world
  concurrency bug characteristics.
\newblock In {\em Thirteenth International Conference on Architecture Support
  for Programming Languages and Operating Systems (ASPLOS '08)}, pages
  329--339, Mar. 2008.

\bibitem{avio:asplos06}
S.~Lu, J.~Tucek, F.~Qin, and Y.~Zhou.
\newblock {AVIO}: detecting atomicity violations via access interleaving
  invariants.
\newblock In {\em Twelfth International Conference on Architecture Support for
  Programming Languages and Operating Systems (ASPLOS '06)}, pages 37--48, Oct.
  2006.

\bibitem{sospinfomationflowcontrol}
A.~Myers and B.~Liskov.
\newblock A decentralized model for information flow control.
\newblock In {\em Proceedings of the 16th ACM Symposium on Operating Systems
  Principles (SOSP '97)}, pages 129--142, 1997.

\bibitem{valgrind:pldi}
N.~Nethercote and J.~Seward.
\newblock Valgrind: a framework for heavyweight dynamic binary instrumentation.
\newblock In {\em Proceedings of the ACM SIGPLAN 2007 Conference on Programming
  Language Design and Implementation (PLDI '07)}, pages 89--100, June 2007.

\bibitem{atomfuzzer:fse08}
C.-S. Park and K.~Sen.
\newblock Randomized active atomicity violation detection in concurrent
  programs.
\newblock In {\em Proceedings of the 16th ACM SIGSOFT International Symposium
  on Foundations of Software Engineering (SIGSOFT '08/FSE-16)}, pages 135--145,
  Nov. 2008.

\bibitem{ctrigger:asplos09}
S.~Park, S.~Lu, and Y.~Zhou.
\newblock {CTrigger: exposing atomicity violation bugs from their hiding
  places}.
\newblock In {\em Fourteenth International Conference on Architecture Support
  for Programming Languages and Operating Systems (ASPLOS '09)}, pages 25--36,
  Mar. 2009.

\bibitem{lift:micro06}
F.~Qin, C.~Wang, Z.~Li, H.-s. Kim, Y.~Zhou, and Y.~Wu.
\newblock Lift: A low-overhead practical information flow tracking system for
  detecting security attacks.
\newblock In {\em MICRO 39: Proceedings of the 39th Annual IEEE/ACM
  International Symposium on Microarchitecture}, pages 135--148, 2006.

\bibitem{ramos2015under}
D.~A. Ramos and D.~R. Engler.
\newblock Under-constrained symbolic execution: Correctness checking for real
  code.
\newblock In {\em USENIX Security Symposium}, pages 49--64, 2015.

\bibitem{costa:openbsd}
C.~Sapuntzakis.
\newblock Personal communication.
\newblock Bug in OpenBSD where an interrupt context could call blocking memory
  allocator, Apr. 2000.

\bibitem{savage:eraser}
S.~Savage, M.~Burrows, G.~Nelson, P.~Sobalvarro, and T.~E. Anderson.
\newblock Eraser: A dynamic data race detector for multithreaded programming.
\newblock {\em ACM Transactions on Computer Systems}, pages 391--411, Nov.
  1997.

\bibitem{schonberg:pldi89}
D.~Schonberg.
\newblock On-the-fly detection of access anomalies.
\newblock In {\em Proceedings of the ACM SIGPLAN '89 Conference on Programming
  Language Design and Implementation}, pages 285--297, 1989.

\bibitem{racefuzzer:pldi08}
K.~Sen.
\newblock Race directed random testing of concurrent programs.
\newblock In {\em Proceedings of the ACM SIGPLAN 2008 Conference on Programming
  Language Design and Implementation (PLDI '08)}, pages 11--21, June 2008.

\bibitem{cute:fse}
K.~Sen, D.~Marinov, and G.~Agha.
\newblock {CUTE}: A concolic unit testing engine for {C}.
\newblock In {\em Proceedings of the 10th European Software Engineering
  Conference held jointly with the 13th ACM SIGSOFT International Symposium on
  Foundations of Software Engineering (ESEC/FSE-13)}, pages 263--272, Sept.
  2005.

\bibitem{aslr-fail:ccs04}
H.~Shacham, M.~Page, B.~Pfaff, E.-J. Goh, N.~Modadugu, and D.~Boneh.
\newblock On the effectiveness of address-space randomization.
\newblock In {\em Proceedings of the 11th ACM conference on Computer and
  communications security}, Proceedings of the 11th ACM conference on Computer
  and communications security (CCS '04), pages 298--307, 2004.

\bibitem{srivastava2011security}
V.~Srivastava, M.~D. Bond, K.~S. McKinley, and V.~Shmatikov.
\newblock A security policy oracle: Detecting security holes using multiple api
  implementations.
\newblock {\em ACM SIGPLAN Notices}, 46(6):343--354, 2011.

\bibitem{SSDB}
\url{ssdb.io/}.

\bibitem{acidrain:sigmod17}
P.~B. Todd~Warszawski.
\newblock Acidrain: Concurrency-related attacks on database-backed web
  applications.
\newblock In {\em Proceedings of the 2017 ACM SIGMOD International Conference
  on Management of Data}, pages 5--20. ACM, 2017.

\bibitem{tsafrir2008portably}
D.~Tsafrir, T.~Hertz, D.~Wagner, and D.~Da~Silva.
\newblock Portably solving file tocttou races with hardness amplification.
\newblock In {\em FAST}, volume~8, pages 1--18, 2008.

\bibitem{tsan}
Threadsanitizer.
\newblock \url{https://code.google.com/p/data-race-test/wiki/ThreadSanitizer},
  2015.

\bibitem{tsyrklevich2003dynamic}
E.~Tsyrklevich and B.~Yee.
\newblock {\em Dynamic detection and prevention of race conditions in file
  accesses}.
\newblock PhD thesis, University of California, San Diego, 2003.

\bibitem{wagner:intrusion}
D.~Wagner and D.~Dean.
\newblock Intrusion detection via static analysis.
\newblock In {\em Proceedings of the 2001 IEEE Symposium on Security and
  Privacy (S\&P '01)}, 2001.

\bibitem{gadara:osdi08}
Y.~Wang, T.~Kelly, M.~Kudlur, S.~Lafortune, and S.~Mahlke.
\newblock Gadara: Dynamic deadlock avoidance for multithreaded programs.
\newblock In {\em Proceedings of the Eighth Symposium on Operating Systems
  Design and Implementation (OSDI '08)}, pages 281--294, Dec. 2008.

\bibitem{wei2005tocttou}
J.~Wei and C.~Pu.
\newblock Tocttou vulnerabilities in unix-style file systems: An anatomical
  study.
\newblock In {\em FAST}, volume~5, pages 12--12, 2005.

\bibitem{wester:parallelizing:asplos13}
B.~Wester, D.~Devecsery, P.~M. Chen, J.~Flinn, and S.~Narayanasamy.
\newblock Parallelizing data race detection.
\newblock In {\em Eighteenth International Conference on Architecture Support
  for Programming Languages and Operating Systems (ASPLOS '13)}, pages 27--38,
  Mar. 2013.

\bibitem{wu:loom:osdi10}
J.~Wu, H.~Cui, and J.~Yang.
\newblock Bypassing races in live applications with execution filters.
\newblock In {\em Proceedings of the Ninth Symposium on Operating Systems
  Design and Implementation (OSDI '10)}, Oct. 2010.

\bibitem{wu2015:collaborative}
Z.~Wu, K.~Lu, X.~Wang, and X.~Zhou.
\newblock Collaborative technique for concurrency bug detection.
\newblock {\em International Journal of Parallel Programming}, 43(2):260--285,
  2015.

\bibitem{yamaguchi2014modeling}
F.~Yamaguchi, N.~Golde, D.~Arp, and K.~Rieck.
\newblock Modeling and discovering vulnerabilities with code property graphs.
\newblock In {\em Security and Privacy (SP), 2014 IEEE Symposium on}, pages
  590--604. IEEE, 2014.

\bibitem{yang2016concurrency}
J.~Yang.
\newblock Concurrency attacks and defenses.
\newblock Technical report, The Trustees of Columbia University in the City of
  New York DUNS 049179401 New York United States, 2016.

\bibitem{con-tr}
J.~Yang, A.~Cui, J.~Gallagher, S.~Stolfo, and S.~Sethumadhavan.
\newblock Concurrency attacks.
\newblock Technical Report CUCS-028-11, Columbia University, 2011.

\bibitem{con:hotpar12}
J.~Yang, A.~Cui, S.~Stolfo, and S.~Sethumadhavan.
\newblock Concurrency attacks.
\newblock In {\em the Fourth USENIX Workshop on Hot Topics in Parallelism
  (HOTPAR '12)}, June 2012.

\bibitem{yang:malicious-disk:oakland06}
J.~Yang, C.~Sar, P.~Twohey, C.~Cadar, and D.~Engler.
\newblock Automatically generating malicious disks using symbolic execution.
\newblock In {\em Proceedings of the 2006 IEEE Symposium on Security and
  Privacy (S\&P '06)}, pages 243--257, May 2006.

\bibitem{yu:racetrack:sosp}
Y.~Yu, T.~Rodeheffer, and W.~Chen.
\newblock {RaceTrack: efficient detection of data race conditions via adaptive
  tracking}.
\newblock In {\em Proceedings of the 20th ACM Symposium on Operating Systems
  Principles (SOSP '05)}, pages 221--234, Oct. 2005.

\bibitem{conseq:asplos11}
W.~Zhang, J.~Lim, R.~Olichandran, J.~Scherpelz, G.~Jin, S.~Lu, and T.~Reps.
\newblock {ConSeq}: detecting concurrency bugs through sequential errors.
\newblock In {\em Sixteenth International Conference on Architecture Support
  for Programming Languages and Operating Systems (ASPLOS '11)}, pages
  251--264, Mar. 2011.

\bibitem{conmem:asplos10}
W.~Zhang, C.~Sun, and S.~Lu.
\newblock {ConMem}: detecting severe concurrency bugs through an
  effect-oriented approach.
\newblock In {\em Fifteenth International Conference on Architecture Support
  for Programming Languages and Operating Systems (ASPLOS '10)}, pages
  179--192, Mar. 2010.

\bibitem{zhang:usenix:sec02}
X.~Zhang, A.~Edwards, and T.~Jaeger.
\newblock Using {CQUAL} for static analysis of authorization hook placement.
\newblock In {\em Proceedings of the 11th USENIX Security Symposium}, pages
  33--48, Aug. 2002.

\end{thebibliography}
